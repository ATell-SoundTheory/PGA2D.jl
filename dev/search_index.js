var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = PGA2D","category":"page"},{"location":"#PGA2D","page":"Home","title":"PGA2D","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for PGA2D.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [PGA2D]","category":"page"},{"location":"#PGA2D.angle_dl-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.angle_dl","text":"angle_dl(d::PGA2DMV, l2::PGA2DMV)\n\nCalculates the angle between the direction d and the line l.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.angle_ll-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.angle_ll","text":"angle_ll(l1::PGA2DMV, l2::PGA2DMV)\n\nCalculates the angle between two lines l1 and l2.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.area_loop-Tuple{Any}","page":"Home","title":"PGA2D.area_loop","text":"area_loop(points)\n\nCalculates the oriented area of the loop defined by the iteratable points. \n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.area_ppp-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.area_ppp","text":"area_ppp(P1::PGA2DMV, P2::PGA2DMV, P3::PGA2DMV)\n\nCalculates the oriented area of the triangle P1,P2,P3.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.d_ortho_l-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.d_ortho_l","text":"d_ortho_l(l::PGA2DMV)\n\nCalculates the direction orthogonal to l.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.direction-Tuple{Real, Real}","page":"Home","title":"PGA2D.direction","text":"direction(x::Real, y::Real)\n\nConstructs a MultiVector that encodes a direction (x,y).\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.direction_coordinates-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.direction_coordinates","text":"direction_coordinates(d::PGA2DMV)\n\nExtracts the direction coordinates (x,y) from a MultiVector P. If the MultiVector does not encode a direction a DomainError is thrown.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.dist_ll-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.dist_ll","text":"dist_ll(l1::PGA2DMV, l2::PGA2DMV)\n\nCalculates the orthogonal Euclidean distance between parallel lines l1 and l2.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.dist_orient_lp-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.dist_orient_lp","text":"dist_orient_lp(l::PGA2DMV, P::PGA2DMV)\n\nCalculates the oriented Euclidean distance between the line l and the point P.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.dist_pp-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.dist_pp","text":"dist_pp(P1::PGA2DMV, P2::PGA2DMV)\n\nCalculates the Euclidean distance between P1 and P2.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.is_direction-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.is_direction","text":"is_direction(d::PGA2DMV)\n\nReturns true iff the MultiVector d encodes a direction.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.is_line-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.is_line","text":"is_line(l::PGA2DMV)\n\nReturns true iff the MultiVector l encodes a line.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.is_motor-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.is_motor","text":"is_motor(m::PGA2DMV)\n\nReturns true iff the MultiVector m encodes a motor.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.is_point-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.is_point","text":"is_point(P::PGA2DMV)\n\nReturns true iff the MultiVector P encodes a point.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.join_pp-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.join_pp","text":"join_pp(P1::PGA2DMV, P2::PGA2DMV)\n\nCalculates the line through the points P1 and P2. If P1 and P2 coincide, the result is 0.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.l_bisect_ll-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.l_bisect_ll","text":"l_bisect_ll(l1::PGA2DMV, l2::PGA2DMV)\n\nCalculates both angle-bisecting lines between l1 and l2 and return them in a tuple of MultiVectors.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.l_bisect_pp-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.l_bisect_pp","text":"l_bisect_pp(P1::PGA2DMV, P2::PGA2DMV)\n\nCalculates the orthogonal bisecting line between the points P1 and P2.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.l_ortho_lp-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.l_ortho_lp","text":"l_ortho_lp(l::PGA2DMV, P::PGA2DMV)\n\nCalculates the line that is orthogonal to l and passes through P.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.l_para_lp-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.l_para_lp","text":"l_para_lp(l::PGA2DMV, P::PGA2DMV)\n\nConstructs a parallel line to the line l in the point P.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.length_loop-Tuple{Any}","page":"Home","title":"PGA2D.length_loop","text":"length_loop(points)\n\nCalculates the length of the loop defined by the iteratable points.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.line-Tuple{Real, Real, Real}","page":"Home","title":"PGA2D.line","text":"line(a::Real, b::Real, c::Real)\n\nConstructs a MultiVector that encodes a line ax + bx + c = 0.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.line_coordinates-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.line_coordinates","text":"line_coordinates(l::PGA2DMV)\n\nExtracts the line coordinates (a,b,c) from a MultiVector l. If the MultiVector does not encode a line a DomainError is thrown.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.meet_ll-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.meet_ll","text":"meet_ll(l1::PGA2DMV, l2::PGA2DMV)\n\nCalculates the point of intersection of the two line-encoding MultiVectors l1 and l2. If the lines are parallel the result is a direction parallel to the lines. If the lines coincides, the result is 0.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.motor_ll-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.motor_ll","text":"motor_ll(l1::PGA2DMV, l2::PGA2DMV)\n\nCalculates the motor that maps the lines l1 to l2.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.motor_pa-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, Real}","page":"Home","title":"PGA2D.motor_pa","text":"motor_pa(P::PGA2DMV, α::Real)\n\nCalculates the motor for a rotation by the angle α around P. If P is a direction, then the motor describes a translation by α orthogonal to the direction.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.move_ll-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.move_ll","text":"move_ll(x::PGA2DMV, l1::PGA2DMV, l2::PGA2DMV)\n\nMoves x with motor_ll(l1,l2).\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.move_m-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.move_m","text":"move_m(x::PGA2DMV, m::PGA2DMV)\n\nMoves x with the motor m.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.move_pa-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, Real}","page":"Home","title":"PGA2D.move_pa","text":"move_pa(x::PGA2DMV, P::PGA2DMV, α::Real)\n\nMoves x with motor_pa(x,P,α).\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.normalize-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.normalize","text":"normalize(x::PGA2DMV)\n\nScales the MultiVector x so that it has unit norm.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.p_bisect_pp-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.p_bisect_pp","text":"p_bisect_pp(P1::PGA2DMV, P2::PGA2DMV)\n\nCalculates the midpoint between P1 and P2.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.p_proj_lp-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.p_proj_lp","text":"p_proj_lp(l::PGA2DMV, P::PGA2DMV)\n\nOrthogonally projects the point P onto the line l.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.point-Tuple{Real, Real}","page":"Home","title":"PGA2D.point","text":"point(x::Real, y::Real)\n\nConstructs a MultiVector that encodes a point (x,y).\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.point_coordinates-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.point_coordinates","text":"point_coordinates(P::PGA2DMV)\n\nExtracts the point coordinates (x,y) from a MultiVector P. If the MultiVector does not encode a point a DomainError is thrown.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.reflect_l-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.reflect_l","text":"reflect_l(x::PGA2DMV, l::PGA2DMV)\n\nReflects any MultiVector encoded object x on the line l.\n\n\n\n\n\n","category":"method"}]
}
