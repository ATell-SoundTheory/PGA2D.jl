var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = PGA2D","category":"page"},{"location":"#PGA2D","page":"Home","title":"PGA2D","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"PGA2D implements the 2D plane-based geometric algebra Cl(2,0,1) on top of CliffordAlgebras.jl. It provides high-level constructors and operations for points, lines, directions, and motors.","category":"page"},{"location":"#Quick-start","page":"Home","title":"Quick start","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using PGA2D\n\np = point(0, 0)\nq = point(1, 0)\nr = point(0, 1)\n\nl = join_pp(p, q)         # line through p and q\nm = meet_ll(join_pp(q,r), join_pp(p,r))  # their intersection (point r)\n\ndist = dist_pp(p, q)      # 1.0\nθ = angle_ll(join_pp(p,q), join_pp(p,r)) # π/2","category":"page"},{"location":"","page":"Home","title":"Home","text":"Coordinates helpers:","category":"page"},{"location":"","page":"Home","title":"Home","text":"point_coordinates(point(-2, 1))         # (-2.0, 1.0)\ndirection_coordinates(direction(1, 0))  # (1, 0)\nline_coordinates(line(1, 1, 0))         # (≈0.707, ≈0.707, 0.0)\n\n# Non-throwing variants return `nothing` if the type doesn’t match\ntry_point_coordinates(direction(1,0))   # nothing","category":"page"},{"location":"","page":"Home","title":"Home","text":"Distance and angle helpers:","category":"page"},{"location":"","page":"Home","title":"Home","text":"dist_lp(join_pp(p,q), r)  # distance from point r to line pq\nangle_dd(direction(1,0), direction(0,1))  # π/2","category":"page"},{"location":"#Triangle-centers","page":"Home","title":"Triangle centers","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Incenter (intersection of internal angle bisectors) and centroid (intersection of medians):","category":"page"},{"location":"","page":"Home","title":"Home","text":"P1, P2, P3 = point(0,0), point(1,0), point(0,1)\nI = incenter_ppp(P1, P2, P3)\nCg = meet_ll(join_pp(P3, p_bisect_pp(P1,P2)), join_pp(P1, p_bisect_pp(P2,P3)))","category":"page"},{"location":"#Plotting-(optional)","page":"Home","title":"Plotting (optional)","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"PGA2D ships a Plots.jl recipe as an optional extension. If Plots is present in the environment, the recipe is loaded automatically on Julia ≥ 1.9.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Plots\nplot([p, q, r, l]; aspect_ratio=:equal)","category":"page"},{"location":"#Index-and-API","page":"Home","title":"Index and API","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [PGA2D]","category":"page"},{"location":"#PGA2D.angle_dd-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.angle_dd","text":"angle_dd(d1::PGA2DMV, d2::PGA2DMV)\n\nAngle between directions d1 and d2. Computes from Euclidean coordinates to avoid null-norm issues.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.angle_dd_signed-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.angle_dd_signed","text":"angle_dd_signed(d1::PGA2DMV, d2::PGA2DMV)\n\nSigned angle from direction d1 to d2 in (-π, π], using atan2 of the 2D cross/dot of Euclidean coordinates.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.angle_dl-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.angle_dl","text":"angle_dl(d::PGA2DMV, l2::PGA2DMV)\n\nCalculates the angle between the direction d and the line l.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.angle_dl_signed-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.angle_dl_signed","text":"angle_dl_signed(d::PGA2DMV, l::PGA2DMV)\n\nSigned angle from direction d to the tangent of line l in (-π, π]. The line's tangent is chosen as (-b, a) for l = a e1 + b e2 + c e0.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.angle_ll-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.angle_ll","text":"angle_ll(l1::PGA2DMV, l2::PGA2DMV)\n\nCalculates the angle between two lines l1 and l2.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.angle_ll_signed-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.angle_ll_signed","text":"angle_ll_signed(l1::PGA2DMV, l2::PGA2DMV)\n\nSigned angle from line l1 to l2 in (-π, π], defined via their outward normals.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.area_loop-Tuple{Any}","page":"Home","title":"PGA2D.area_loop","text":"area_loop(points)\n\nCalculates the oriented area of the loop defined by the iterable points. \n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.area_ppp-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.area_ppp","text":"area_ppp(P1::PGA2DMV, P2::PGA2DMV, P3::PGA2DMV)\n\nCalculates the oriented area of the triangle P1,P2,P3.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.circumcenter_ppp-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.circumcenter_ppp","text":"circumcenter_ppp(P1::PGA2DMV, P2::PGA2DMV, P3::PGA2DMV) -> PGA2DMV\n\nReturns the circumcenter of triangle (P1, P2, P3) as the intersection of two perpendicular bisectors.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.circumcircle_ppp-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.circumcircle_ppp","text":"circumcircle_ppp(P1::PGA2DMV, P2::PGA2DMV, P3::PGA2DMV) -> (center::PGA2DMV, radius::Real)\n\nReturns the circumcenter and circumradius of triangle (P1, P2, P3).\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.d_ortho_l-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.d_ortho_l","text":"d_ortho_l(l::PGA2DMV)\n\nCalculates the direction orthogonal to l.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.direction-Tuple{Real, Real}","page":"Home","title":"PGA2D.direction","text":"direction(x::Real, y::Real)\n\nConstructs a MultiVector that encodes a direction (x,y).\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.direction_coordinates-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.direction_coordinates","text":"direction_coordinates(d::PGA2DMV)\n\nExtracts the direction coordinates (x,y) from a MultiVector P. If the MultiVector does not encode a direction a DomainError is thrown.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.dist_ll-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.dist_ll","text":"dist_ll(l1::PGA2DMV, l2::PGA2DMV)\n\nCalculates the orthogonal Euclidean distance between parallel lines l1 and l2.\n\nNotes\n\nThis quantity is well-defined as the perpendicular distance only when the two lines are parallel.\nFor almost-parallel lines with a small angle φ between them, dist_ll equals the parallel offset multiplied by cos(φ). Hence, as the lines deviate from perfect parallelity, the returned value decreases by a factor ≈ 1 - φ^2/2 (second-order in φ).\nFor non-parallel lines (intersecting), this is not the minimal point-to-line distance (which is 0); it returns the component of the offset along the common normal as if the lines were treated as nearly parallel. No attempt is made to detect parallelism.\n\nExample Let l1: y = 0 and l2: y = d + m x. Then l1 = line(0, 1, 0) and l2 = line(m, -1, d). One finds dist_ll(l1, l2) = |d| / √(1 + m^2) = |d| cos(φ), where φ = atan(m) is the angle between the two lines. Thus for m → 0 (nearly parallel) the value approaches |d| with a relative error ≈ m^2/2.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.dist_lp-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.dist_lp","text":"dist_lp(l::PGA2DMV, P::PGA2DMV)\n\nUnsigned Euclidean distance between line l and point P.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.dist_orient_lp-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.dist_orient_lp","text":"dist_orient_lp(l::PGA2DMV, P::PGA2DMV)\n\nCalculates the oriented Euclidean distance between the line l and the point P.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.dist_pp-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.dist_pp","text":"dist_pp(P1::PGA2DMV, P2::PGA2DMV)\n\nCalculates the Euclidean distance between P1 and P2.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.incenter_ppp-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.incenter_ppp","text":"incenter_ppp(P1::PGA2DMV, P2::PGA2DMV, P3::PGA2DMV) -> PGA2DMV\n\nReturns the incenter of triangle (P1, P2, P3) as the intersection of internal angle bisectors.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.incircle_ppp-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.incircle_ppp","text":"incircle_ppp(P1::PGA2DMV, P2::PGA2DMV, P3::PGA2DMV) -> (center::PGA2DMV, radius::Real)\n\nReturns the incenter and inradius of triangle (P1, P2, P3).\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.is_direction-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.is_direction","text":"is_direction(d::PGA2DMV)\n\nReturns true iff the MultiVector d encodes a direction.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.is_line-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.is_line","text":"is_line(l::PGA2DMV)\n\nReturns true iff the MultiVector l encodes a line.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.is_motor-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.is_motor","text":"is_motor(m::PGA2DMV)\n\nReturns true iff the MultiVector m encodes a motor.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.is_point-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.is_point","text":"is_point(P::PGA2DMV)\n\nReturns true iff the MultiVector P encodes a point.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.join_pp-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.join_pp","text":"join_pp(P1::PGA2DMV, P2::PGA2DMV)\n\nCalculates the line through the points P1 and P2. If P1 and P2 coincide, the result is 0.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.l_bisect_ll-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.l_bisect_ll","text":"l_bisect_ll(l1::PGA2DMV, l2::PGA2DMV)\n\nCalculates both angle-bisecting lines between l1 and l2 and return them in a tuple of MultiVectors.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.l_bisect_pp-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.l_bisect_pp","text":"l_bisect_pp(P1::PGA2DMV, P2::PGA2DMV)\n\nCalculates the orthogonal bisecting line between the points P1 and P2.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.l_ortho_lp-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.l_ortho_lp","text":"l_ortho_lp(l::PGA2DMV, P::PGA2DMV)\n\nCalculates the line that is orthogonal to l and passes through P.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.l_para_lp-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.l_para_lp","text":"l_para_lp(l::PGA2DMV, P::PGA2DMV)\n\nConstructs a parallel line to the line l in the point P.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.length_loop-Tuple{Any}","page":"Home","title":"PGA2D.length_loop","text":"length_loop(points)\n\nCalculates the length of the loop defined by the iterable points.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.line-Tuple{Real, Real, Real}","page":"Home","title":"PGA2D.line","text":"line(a::Real, b::Real, c::Real)\n\nConstructs a MultiVector that encodes a line a·x + b·y + c = 0.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.line_coordinates-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.line_coordinates","text":"line_coordinates(l::PGA2DMV)\n\nExtracts the line coordinates (a,b,c) from a MultiVector l. If the MultiVector does not encode a line a DomainError is thrown.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.line_pd-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.line_pd","text":"line_pd(d::PGA2DMV, P::PGA2DMV) -> PGA2DMV\n\nConstruct the line passing through point P with tangent direction d.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.meet_ll-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.meet_ll","text":"meet_ll(l1::PGA2DMV, l2::PGA2DMV)\n\nCalculates the point of intersection of the two line-encoding MultiVectors l1 and l2. If the lines are parallel the result is a direction parallel to the lines. If the lines coincides, the result is 0.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.motor_ll-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.motor_ll","text":"motor_ll(l1::PGA2DMV, l2::PGA2DMV)\n\nCalculates the motor that maps the lines l1 to l2.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.motor_pa-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, Real}","page":"Home","title":"PGA2D.motor_pa","text":"motor_pa(P::PGA2DMV, α::Real)\n\nCalculates the motor for a rotation by the angle α around P. If P is a direction, then the motor describes a translation by α orthogonal to the direction.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.move_ll-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.move_ll","text":"move_ll(x::PGA2DMV, l1::PGA2DMV, l2::PGA2DMV)\n\nMoves x with motor_ll(l1,l2).\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.move_m-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.move_m","text":"move_m(x::PGA2DMV, m::PGA2DMV)\n\nMoves x with the motor m.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.move_pa-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, Real}","page":"Home","title":"PGA2D.move_pa","text":"move_pa(x::PGA2DMV, P::PGA2DMV, α::Real)\n\nMoves x with motor_pa(x,P,α).\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.normalize-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.normalize","text":"normalize(x::PGA2DMV)\n\nScales the MultiVector x so that it has unit norm. Throws a DomainError for zero-norm inputs.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.orthocenter_ppp-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.orthocenter_ppp","text":"orthocenter_ppp(P1::PGA2DMV, P2::PGA2DMV, P3::PGA2DMV) -> PGA2DMV\n\nReturns the orthocenter of triangle (P1, P2, P3) as the intersection of two altitudes.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.p_bisect_pp-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.p_bisect_pp","text":"p_bisect_pp(P1::PGA2DMV, P2::PGA2DMV)\n\nCalculates the midpoint between P1 and P2.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.p_proj_lp-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.p_proj_lp","text":"p_proj_lp(l::PGA2DMV, P::PGA2DMV)\n\nOrthogonally projects the point P onto the line l.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.point-Tuple{Real, Real}","page":"Home","title":"PGA2D.point","text":"point(x::Real, y::Real)\n\nConstructs a MultiVector that encodes a point (x,y).\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.point_coordinates-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.point_coordinates","text":"point_coordinates(P::PGA2DMV)\n\nExtracts the point coordinates (x,y) from a MultiVector P. If the MultiVector does not encode a point a DomainError is thrown.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.reflect_l-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.reflect_l","text":"reflect_l(x::PGA2DMV, l::PGA2DMV)\n\nReflects any MultiVector encoded object x on the line l.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.try_circumcenter_ppp-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.try_circumcenter_ppp","text":"try_circumcenter_ppp(P1::PGA2DMV, P2::PGA2DMV, P3::PGA2DMV) -> Union{PGA2DMV,Nothing}\n\nNon-throwing/degeneracy-friendly circumcenter; returns nothing if it cannot be determined.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.try_direction_coordinates-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.try_direction_coordinates","text":"try_direction_coordinates(d::PGA2DMV) -> Union{Tuple{<:Real,<:Real},Nothing}\n\nNon-throwing variant of direction_coordinates. Returns (x,y) or nothing if d is not a direction.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.try_incenter_ppp-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.try_incenter_ppp","text":"try_incenter_ppp(P1::PGA2DMV, P2::PGA2DMV, P3::PGA2DMV) -> Union{PGA2DMV,Nothing}\n\nNon-throwing/degeneracy-friendly incenter; returns nothing if it cannot be determined.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.try_line_coordinates-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.try_line_coordinates","text":"try_line_coordinates(l::PGA2DMV) -> Union{Tuple{<:Real,<:Real,<:Real},Nothing}\n\nNon-throwing variant of line_coordinates. Returns (a,b,c) or nothing if l is not a line.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.try_orthocenter_ppp-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}, CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.try_orthocenter_ppp","text":"try_orthocenter_ppp(P1::PGA2DMV, P2::PGA2DMV, P3::PGA2DMV) -> Union{PGA2DMV,Nothing}\n\nNon-throwing/degeneracy-friendly orthocenter; returns nothing if it cannot be determined.\n\n\n\n\n\n","category":"method"},{"location":"#PGA2D.try_point_coordinates-Tuple{CliffordAlgebras.MultiVector{CliffordAlgebras.CliffordAlgebra{2, 0, 1, (:e1, :e2, :e0), ((), (1,), (2,), (3,), (1, 2), (3, 1), (2, 3), (1, 2, 3))}}}","page":"Home","title":"PGA2D.try_point_coordinates","text":"try_point_coordinates(P::PGA2DMV) -> Union{Tuple{<:Real,<:Real},Nothing}\n\nNon-throwing variant of point_coordinates. Returns (x,y) or nothing if P is not a point.\n\n\n\n\n\n","category":"method"},{"location":"triangle_centers/#Triangle-centers","page":"Triangle centers","title":"Triangle centers","text":"","category":"section"},{"location":"triangle_centers/","page":"Triangle centers","title":"Triangle centers","text":"This page collects constructions for classic triangle centers using PGA2D.","category":"page"},{"location":"triangle_centers/","page":"Triangle centers","title":"Triangle centers","text":"CurrentModule = PGA2D","category":"page"},{"location":"triangle_centers/#Setup","page":"Triangle centers","title":"Setup","text":"","category":"section"},{"location":"triangle_centers/","page":"Triangle centers","title":"Triangle centers","text":"P1, P2, P3 = point(0,0), point(1,0), point(0,1)","category":"page"},{"location":"triangle_centers/#Incenter","page":"Triangle centers","title":"Incenter","text":"","category":"section"},{"location":"triangle_centers/","page":"Triangle centers","title":"Triangle centers","text":"Intersection of internal angle bisectors:","category":"page"},{"location":"triangle_centers/","page":"Triangle centers","title":"Triangle centers","text":"I = incenter_ppp(P1, P2, P3)\npoint_coordinates(I)","category":"page"},{"location":"triangle_centers/","page":"Triangle centers","title":"Triangle centers","text":"Expected for the right unit triangle: (1 - √2/2, 1 - √2/2).","category":"page"},{"location":"triangle_centers/#Circumcenter","page":"Triangle centers","title":"Circumcenter","text":"","category":"section"},{"location":"triangle_centers/","page":"Triangle centers","title":"Triangle centers","text":"Intersection of perpendicular bisectors:","category":"page"},{"location":"triangle_centers/","page":"Triangle centers","title":"Triangle centers","text":"Cc = circumcenter_ppp(P1, P2, P3)\npoint_coordinates(Cc)  # (0.5, 0.5)","category":"page"},{"location":"triangle_centers/#Circumcircle","page":"Triangle centers","title":"Circumcircle","text":"","category":"section"},{"location":"triangle_centers/","page":"Triangle centers","title":"Triangle centers","text":"Cc2, R = circumcircle_ppp(P1, P2, P3)\npoint_coordinates(Cc2), R","category":"page"},{"location":"triangle_centers/#Incircle","page":"Triangle centers","title":"Incircle","text":"","category":"section"},{"location":"triangle_centers/","page":"Triangle centers","title":"Triangle centers","text":"Ic, r = incircle_ppp(P1, P2, P3)\npoint_coordinates(Ic), r","category":"page"},{"location":"triangle_centers/#Orthocenter","page":"Triangle centers","title":"Orthocenter","text":"","category":"section"},{"location":"triangle_centers/","page":"Triangle centers","title":"Triangle centers","text":"Intersection of altitudes:","category":"page"},{"location":"triangle_centers/","page":"Triangle centers","title":"Triangle centers","text":"H = orthocenter_ppp(P1, P2, P3)\npoint_coordinates(H)   # (0.0, 0.0)","category":"page"},{"location":"triangle_centers/#Centroid-(for-comparison)","page":"Triangle centers","title":"Centroid (for comparison)","text":"","category":"section"},{"location":"triangle_centers/","page":"Triangle centers","title":"Triangle centers","text":"Intersection of medians:","category":"page"},{"location":"triangle_centers/","page":"Triangle centers","title":"Triangle centers","text":"Cg = meet_ll(join_pp(P3, p_bisect_pp(P1,P2)), join_pp(P1, p_bisect_pp(P2,P3)))\npoint_coordinates(Cg)   # (1/3, 1/3)","category":"page"},{"location":"triangle_centers/#Plotting-demo-(optional)","page":"Triangle centers","title":"Plotting demo (optional)","text":"","category":"section"},{"location":"triangle_centers/","page":"Triangle centers","title":"Triangle centers","text":"The plotting recipe is provided via an optional extension and loads automatically when Plots is available on Julia ≥ 1.9. This example is not doctested or executed during CI, keeping builds deterministic.","category":"page"},{"location":"triangle_centers/","page":"Triangle centers","title":"Triangle centers","text":"using PGA2D, Plots\n\n# Triangle vertices and centers\nP1, P2, P3 = point(0,0), point(1,0), point(0,1)\nI  = incenter_ppp(P1, P2, P3)\nCc = circumcenter_ppp(P1, P2, P3)\nH  = orthocenter_ppp(P1, P2, P3)\nCg = meet_ll(join_pp(P3, p_bisect_pp(P1,P2)), join_pp(P1, p_bisect_pp(P2,P3)))\n\n# Triangle sides\nL12, L23, L31 = join_pp(P1,P2), join_pp(P2,P3), join_pp(P3,P1)\n\nplot(legend=:outerright, aspect_ratio=:equal, size=(500,400))\nscatter!([P1,P2,P3], label=\"Vertices\")\nplot!([L12,L23,L31], label=[\"L12\" \"L23\" \"L31\"])  # recipe handles arrays\n\nscatter!([I], label=\"Incenter\")\nscatter!([Cc], label=\"Circumcenter\")\nscatter!([H], label=\"Orthocenter\")\nscatter!([Cg], label=\"Centroid\")\n# Optionally save the figure locally:\n# savefig(\"triangle_centers.png\")","category":"page"}]
}
