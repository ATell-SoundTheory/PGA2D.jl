name: CI

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  test:
    name: Runtests (Julia ${{ matrix.julia }} â€¢ ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        julia: ['1.6', '1.10', '1']
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.julia }}
      - uses: julia-actions/cache@v1
      - name: Build package
        run: julia --color=yes --project -e 'using Pkg; Pkg.build()'
      - name: Instantiate
        run: julia --color=yes --project -e 'using Pkg; Pkg.instantiate()'
      - name: Run tests
        run: julia --color=yes --project -e 'using Pkg; Pkg.test(; coverage=false)'

  docs:
    name: Docs
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        with:
          version: '1'
      - name: Doctest
        run: |
          julia --project=docs -e '
            using Pkg; Pkg.develop(path=pwd()); Pkg.instantiate()
            using Documenter: DocMeta, doctest
            using PGA2D
            DocMeta.setdocmeta!(PGA2D, :DocTestSetup, :(using PGA2D); recursive=true)
            doctest(PGA2D)'
      - name: Build and deploy docs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}
        run: |
          julia --project=docs -e 'using Pkg; Pkg.develop(path=pwd()); Pkg.instantiate()'
          julia --project=docs docs/make.jl
